// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chat/v1/chat.proto

package chatv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/MokkeMeguru/chat-benchmarks/internal/infrastructure/connect/proto/chat/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ChatServiceName is the fully-qualified name of the ChatService service.
	ChatServiceName = "chat.v1.ChatService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ChatServiceTempCreateUserProcedure is the fully-qualified name of the ChatService's
	// TempCreateUser RPC.
	ChatServiceTempCreateUserProcedure = "/chat.v1.ChatService/TempCreateUser"
	// ChatServiceSendProcedure is the fully-qualified name of the ChatService's Send RPC.
	ChatServiceSendProcedure = "/chat.v1.ChatService/Send"
	// ChatServiceReceiveProcedure is the fully-qualified name of the ChatService's Receive RPC.
	ChatServiceReceiveProcedure = "/chat.v1.ChatService/Receive"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	chatServiceServiceDescriptor              = v1.File_chat_v1_chat_proto.Services().ByName("ChatService")
	chatServiceTempCreateUserMethodDescriptor = chatServiceServiceDescriptor.Methods().ByName("TempCreateUser")
	chatServiceSendMethodDescriptor           = chatServiceServiceDescriptor.Methods().ByName("Send")
	chatServiceReceiveMethodDescriptor        = chatServiceServiceDescriptor.Methods().ByName("Receive")
)

// ChatServiceClient is a client for the chat.v1.ChatService service.
type ChatServiceClient interface {
	// 検証用の一時的なユーザーを作成 RPC
	TempCreateUser(context.Context, *connect.Request[v1.TempCreateUserRequest]) (*connect.Response[v1.TempCreateUserResponse], error)
	Send(context.Context, *connect.Request[v1.SendRequest]) (*connect.Response[v1.SendResponse], error)
	Receive(context.Context, *connect.Request[v1.ReceiveRequest]) (*connect.ServerStreamForClient[v1.ReceiveResponse], error)
}

// NewChatServiceClient constructs a client for the chat.v1.ChatService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewChatServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ChatServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &chatServiceClient{
		tempCreateUser: connect.NewClient[v1.TempCreateUserRequest, v1.TempCreateUserResponse](
			httpClient,
			baseURL+ChatServiceTempCreateUserProcedure,
			connect.WithSchema(chatServiceTempCreateUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		send: connect.NewClient[v1.SendRequest, v1.SendResponse](
			httpClient,
			baseURL+ChatServiceSendProcedure,
			connect.WithSchema(chatServiceSendMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		receive: connect.NewClient[v1.ReceiveRequest, v1.ReceiveResponse](
			httpClient,
			baseURL+ChatServiceReceiveProcedure,
			connect.WithSchema(chatServiceReceiveMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// chatServiceClient implements ChatServiceClient.
type chatServiceClient struct {
	tempCreateUser *connect.Client[v1.TempCreateUserRequest, v1.TempCreateUserResponse]
	send           *connect.Client[v1.SendRequest, v1.SendResponse]
	receive        *connect.Client[v1.ReceiveRequest, v1.ReceiveResponse]
}

// TempCreateUser calls chat.v1.ChatService.TempCreateUser.
func (c *chatServiceClient) TempCreateUser(ctx context.Context, req *connect.Request[v1.TempCreateUserRequest]) (*connect.Response[v1.TempCreateUserResponse], error) {
	return c.tempCreateUser.CallUnary(ctx, req)
}

// Send calls chat.v1.ChatService.Send.
func (c *chatServiceClient) Send(ctx context.Context, req *connect.Request[v1.SendRequest]) (*connect.Response[v1.SendResponse], error) {
	return c.send.CallUnary(ctx, req)
}

// Receive calls chat.v1.ChatService.Receive.
func (c *chatServiceClient) Receive(ctx context.Context, req *connect.Request[v1.ReceiveRequest]) (*connect.ServerStreamForClient[v1.ReceiveResponse], error) {
	return c.receive.CallServerStream(ctx, req)
}

// ChatServiceHandler is an implementation of the chat.v1.ChatService service.
type ChatServiceHandler interface {
	// 検証用の一時的なユーザーを作成 RPC
	TempCreateUser(context.Context, *connect.Request[v1.TempCreateUserRequest]) (*connect.Response[v1.TempCreateUserResponse], error)
	Send(context.Context, *connect.Request[v1.SendRequest]) (*connect.Response[v1.SendResponse], error)
	Receive(context.Context, *connect.Request[v1.ReceiveRequest], *connect.ServerStream[v1.ReceiveResponse]) error
}

// NewChatServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewChatServiceHandler(svc ChatServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	chatServiceTempCreateUserHandler := connect.NewUnaryHandler(
		ChatServiceTempCreateUserProcedure,
		svc.TempCreateUser,
		connect.WithSchema(chatServiceTempCreateUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceSendHandler := connect.NewUnaryHandler(
		ChatServiceSendProcedure,
		svc.Send,
		connect.WithSchema(chatServiceSendMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceReceiveHandler := connect.NewServerStreamHandler(
		ChatServiceReceiveProcedure,
		svc.Receive,
		connect.WithSchema(chatServiceReceiveMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/chat.v1.ChatService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ChatServiceTempCreateUserProcedure:
			chatServiceTempCreateUserHandler.ServeHTTP(w, r)
		case ChatServiceSendProcedure:
			chatServiceSendHandler.ServeHTTP(w, r)
		case ChatServiceReceiveProcedure:
			chatServiceReceiveHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedChatServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedChatServiceHandler struct{}

func (UnimplementedChatServiceHandler) TempCreateUser(context.Context, *connect.Request[v1.TempCreateUserRequest]) (*connect.Response[v1.TempCreateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chat.v1.ChatService.TempCreateUser is not implemented"))
}

func (UnimplementedChatServiceHandler) Send(context.Context, *connect.Request[v1.SendRequest]) (*connect.Response[v1.SendResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chat.v1.ChatService.Send is not implemented"))
}

func (UnimplementedChatServiceHandler) Receive(context.Context, *connect.Request[v1.ReceiveRequest], *connect.ServerStream[v1.ReceiveResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("chat.v1.ChatService.Receive is not implemented"))
}
