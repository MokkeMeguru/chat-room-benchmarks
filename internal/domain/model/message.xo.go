package model

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// Message represents a row from 'public.messages'.
type Message struct {
	MessageID string    `json:"message_id"` // message_id
	RoomID    string    `json:"room_id"`    // room_id
	Content   string    `json:"content"`    // content
	UserID    string    `json:"user_id"`    // user_id
	CreatedAt time.Time `json:"created_at"` // created_at
	UpdatedAt time.Time `json:"updated_at"` // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Message] exists in the database.
func (m *Message) Exists() bool {
	return m._exists
}

// Deleted returns true when the [Message] has been marked for deletion
// from the database.
func (m *Message) Deleted() bool {
	return m._deleted
}

// Insert inserts the [Message] to the database.
func (m *Message) Insert(ctx context.Context, db DB) error {
	switch {
	case m._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case m._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.messages (` +
		`message_id, room_id, content, user_id, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)`
	// run
	logf(sqlstr, m.MessageID, m.RoomID, m.Content, m.UserID, m.CreatedAt, m.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, m.MessageID, m.RoomID, m.Content, m.UserID, m.CreatedAt, m.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	m._exists = true
	return nil
}

// Update updates a [Message] in the database.
func (m *Message) Update(ctx context.Context, db DB) error {
	switch {
	case !m._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case m._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.messages SET ` +
		`room_id = $1, content = $2, user_id = $3, created_at = $4, updated_at = $5 ` +
		`WHERE message_id = $6`
	// run
	logf(sqlstr, m.RoomID, m.Content, m.UserID, m.CreatedAt, m.UpdatedAt, m.MessageID)
	if _, err := db.ExecContext(ctx, sqlstr, m.RoomID, m.Content, m.UserID, m.CreatedAt, m.UpdatedAt, m.MessageID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Message] to the database.
func (m *Message) Save(ctx context.Context, db DB) error {
	if m.Exists() {
		return m.Update(ctx, db)
	}
	return m.Insert(ctx, db)
}

// Upsert performs an upsert for [Message].
func (m *Message) Upsert(ctx context.Context, db DB) error {
	switch {
	case m._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.messages (` +
		`message_id, room_id, content, user_id, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)` +
		` ON CONFLICT (message_id) DO ` +
		`UPDATE SET ` +
		`room_id = EXCLUDED.room_id, content = EXCLUDED.content, user_id = EXCLUDED.user_id, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, m.MessageID, m.RoomID, m.Content, m.UserID, m.CreatedAt, m.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, m.MessageID, m.RoomID, m.Content, m.UserID, m.CreatedAt, m.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	m._exists = true
	return nil
}

// Delete deletes the [Message] from the database.
func (m *Message) Delete(ctx context.Context, db DB) error {
	switch {
	case !m._exists: // doesn't exist
		return nil
	case m._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.messages ` +
		`WHERE message_id = $1`
	// run
	logf(sqlstr, m.MessageID)
	if _, err := db.ExecContext(ctx, sqlstr, m.MessageID); err != nil {
		return logerror(err)
	}
	// set deleted
	m._deleted = true
	return nil
}

// MessageByMessageID retrieves a row from 'public.messages' as a [Message].
//
// Generated from index 'messages_pkey'.
func MessageByMessageID(ctx context.Context, db DB, messageID string) (*Message, error) {
	// query
	const sqlstr = `SELECT ` +
		`message_id, room_id, content, user_id, created_at, updated_at ` +
		`FROM public.messages ` +
		`WHERE message_id = $1`
	// run
	logf(sqlstr, messageID)
	m := Message{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, messageID).Scan(&m.MessageID, &m.RoomID, &m.Content, &m.UserID, &m.CreatedAt, &m.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &m, nil
}

// User returns the User associated with the [Message]'s (UserID).
//
// Generated from foreign key 'messages_user_id_fkey'.
func (m *Message) User(ctx context.Context, db DB) (*User, error) {
	return UserByUserID(ctx, db, m.UserID)
}
